services:

  streamlit:
    build:
      context: ./src/streamlit_app
      dockerfile: Dockerfile.streamlit
    container_name: streamlit_app
    user: "1000:1000"
    ports:
      - "8501:8501"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/app/data
      - ./models:/app/models
      - ./reports:/app/reports
      - ./src/monitoring:/app/src/monitoring
      - ./src/movie:/app/src/movie
    env_file: .env
    environment:
      - DATA_DIR=/app/data
      - MODEL_DIR=/app/models
      - REPORT_DIR=/app/reports
    networks:
      - airflow_net
    depends_on:
      - api_service
      
  api_service:
    build:
      context: ./src/api_service
      dockerfile: Dockerfile.API
    container_name: api_service
    user: "1000:1000"
    ports:
      - "8000:8000"
    volumes:
    #  - ./src/api_service:/app/src/api_service
      - ./data:/app/data
      - ./models:/app/models
      - ./reports:/app/reports
      - ./src/monitoring:/app/src/monitoring
      - ./src/movie:/app/src/movie
    env_file: .env
    environment:
      - DATA_DIR=/app/data
      - MODEL_DIR=/app/models
      - REPORT_DIR=/app/reports
    networks:
      - airflow_net

  postgres:
    image: postgres:13
    container_name: postgres_airflow
    user: "999:999"
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - airflow_net

  airflow-webserver:
    build:
      context: ./src/airflow
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    user: "1000:0"
    restart: always
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    working_dir: /opt/airflow
    env_file: .env
    environment:
      - PYTHONPATH=/opt/airflow
      - AIRFLOW_UID=50000
      - DATA_DIR=/opt/airflow/data
      - MODEL_DIR=/opt/airflow/models
      - REPORT_DIR=/opt/airflow/reports
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
      - ./src/airflow/plugins:/opt/airflow/plugins
      - ./src/airflow/logs:/opt/airflow/logs
      - ./src/movie:/opt/airflow/src/movie
      - ./src/monitoring:/opt/airflow/src/monitoring
      - ./reports:/opt/airflow/reports
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
    command: >
      bash -c "
        airflow db upgrade &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
        airflow webserver
      "
    networks:
      - airflow_net

  airflow-scheduler:
    build:
      context: ./src/airflow
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    user: "1000:0"
    restart: always
    depends_on:
      - postgres
    working_dir: /opt/airflow
    env_file: .env
    environment:
      - PYTHONPATH=/opt/airflow
      - AIRFLOW_UID=50000
      - DATA_DIR=/opt/airflow/data
      - MODEL_DIR=/opt/airflow/models
      - REPORT_DIR=/opt/airflow/reports
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
      - ./src/airflow/plugins:/opt/airflow/plugins
      - ./src/airflow/logs:/opt/airflow/logs
      - ./src/movie:/opt/airflow/src/movie
      - ./src/monitoring:/opt/airflow/src/monitoring
      - ./reports:/opt/airflow/reports
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
    command: airflow scheduler
    networks:
      - airflow_net

  bentoml:
    build:
      context: ./src/Bento_service
      dockerfile: Dockerfile.Bento
    container_name: bentoml_service
    user: "${UID}:${GID}"
    ports:
      - "4000:4000"
    volumes:
      - ./src/Bento_service:/app/src/Bento_service
      - ./src/movie:/app/src/movie
      - ./reports:/app/reports
      - ./src/monitoring:/app/src/monitoring
      - ./models:/app/models
      - ./data:/app/data
    env_file: .env
    environment:
      - TZ=Europe/Berlin
      - DATA_DIR=/app/data
      - MODEL_DIR=/app/models
      - REPORT_DIR=/app/reports
    networks:
      - airflow_net
    restart: always
    
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: "1000:1000"
    ports:
      - "9090:9090"
    volumes:
      - ./src/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./src/prometheus/data:/prometheus
      - ./data/monitoring:/prometheus/metrics
    networks:
      - airflow_net
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "1000:1000"
    ports:
      - "3000:3000"
    volumes:
      - ./src/grafana/data:/var/lib/grafana
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - airflow_net
    restart: always

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.textfile.directory=/textfiles'
    volumes:
      - ./reports:/textfiles
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    ports:
      - "9100:9100"
    networks:
      - airflow_net
    restart: always

volumes:
  postgres_db:

networks:
  airflow_net: {}